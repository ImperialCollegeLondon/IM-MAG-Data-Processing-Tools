name: Dev build CI


on:
  push:
    paths-ignore:
      - 'README**'
    branches:
      - '**'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - 'README**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        python-versions: ['3.10', '3.11', '3.12']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    # map step outputs to job outputs so they can be share among jobs
    outputs:
      package_version: ${{ env.PACKAGE_VERSION }}
      package_name: ${{ env.PACKAGE_NAME }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Declare version variables for dev builds
        id: variables_step_dev
        run: |
          poetry version $(poetry version --short)-dev.$GITHUB_RUN_NUMBER
          echo "Using version from pyproject.toml file with dev suffix (not on a tag): $(poetry version --short)"
          echo "PACKAGE_NAME=$(poetry version | awk '{print $1}')" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(poetry version --short)" >> $GITHUB_ENV
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        shell: bash

      - name: Declare version variables for tag based builds
        id: variables_step_tags
        run: |
          echo "Using version from pyproject.toml file: $(poetry version --short)"
          echo "PACKAGE_NAME=$(poetry version | awk '{print $1}')" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(poetry version --short)" >> $GITHUB_ENV
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        shell: bash

      - name: build
        run: |
            ./build.sh

      - name: Build wheels and source tarball
        run: |
            ./pack.sh

      - name: Create Version file
        run: echo "Version ${{ env.PACKAGE_VERSION }}, SHA ${{ github.sha }}, Ref ${{ github.ref_name }}" >  dist/python${{matrix.python-versions}}/version.txt

      - name: Zip up the folder
        run: zip -r ${{ env.PACKAGE_NAME }}-python${{matrix.python-versions}}-${{ env.PACKAGE_VERSION }}.zip python${{matrix.python-versions}}
        working-directory: dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-python${{matrix.python-versions}}-${{ env.PACKAGE_VERSION }}
          path: dist/${{ env.PACKAGE_NAME }}-python${{matrix.python-versions}}-${{ env.PACKAGE_VERSION }}.zip
          if-no-files-found: error

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        if: matrix.python-versions == '3.10'
        with:
          name: Coverage-python${{matrix.python-versions}}-${{ env.PACKAGE_VERSION }}
          path: htmlcov
          if-no-files-found: error

      - name: Create Release ${{github.ref_name}} & upload artifacts
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.python-versions == '3.10'}}
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            dist/${{ env.PACKAGE_NAME }}-python${{matrix.python-versions}}-${{ env.PACKAGE_VERSION }}.zip

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results (${{ matrix.python-versions }})
          path: 'test-results.xml'
          reporter: java-junit
